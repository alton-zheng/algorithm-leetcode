package java01422.m01;

/**
 * @Author: alton
 * @Date: Created in 5/19/21 1:44 PM
 * @Description:
 * 1422. Maximum Score After Splitting a String #426
 * 给你一个由若干 0 和 1 组成的字符串 s ，请你计算并返回将该字符串分割成两个 非空 子字符串（即 左 子字符串和 右 子字符串）所能获得的最大得分。
 * 「分割字符串的得分」为 左 子字符串中 0 的数量加上 右 子字符串中 1 的数量。
 *
 * 示例 1：
 *
 * 输入：s = "011101"
 * 输出：5
 * 解释：
 * 将字符串 s 划分为两个非空子字符串的可行方案有：
 * 左子字符串 = "0" 且 右子字符串 = "11101"，得分 = 1 + 4 = 5
 * 左子字符串 = "01" 且 右子字符串 = "1101"，得分 = 1 + 3 = 4
 * 左子字符串 = "011" 且 右子字符串 = "101"，得分 = 1 + 2 = 3
 * 左子字符串 = "0111" 且 右子字符串 = "01"，得分 = 1 + 1 = 2
 * 左子字符串 = "01110" 且 右子字符串 = "1"，得分 = 2 + 1 = 3
 * 示例 2：
 *
 * 输入：s = "00111"
 * 输出：5
 * 解释：当 左子字符串 = "00" 且 右子字符串 = "111" 时，我们得到最大得分 = 2 + 3 = 5
 * 示例 3：
 *
 * 输入：s = "1111"
 * 输出：3
 *  
 *
 * 提示：
 *
 * 2 <= s.length <= 500
 * 字符串 s 仅由字符 '0' 和 '1' 组成。
 *
 * 时间复杂度 : O(2N)
 */
class Solution {
    public int maxScore(String s) {


        // s 的长度 len
        int len = s.length();

        // 定义变量 score , 保存得分变量
        // 因首字符肯定会被分割在左边，因此需要得分，必须为 '0'
        int score = s.charAt(0) == '0' ? 1 : 0;

        // 第一次遍历， 遇 1 得 1， 遇 0 不得分
        // 到这里为止， 得到的 score 为  left 一个字符， right 剩余字符的场景下得分情况
        for (int i = 1; i < len; i++) {
            score += s.charAt(i) - '0';
        }

        // 定义结果变量，并将初始场景下得分赋值于它
        int res = score;

        // 第二次遍历 [1, len - 2]， 为什么最后一位不遍历呢？
        // 因为最后一位肯定会被分到右边，因此不需要再考虑（第一次遍历已经将最后一位得分情况已经算完了）
        for (int i = 1; i < len - 1; i++) {

            // 遇 '0' 得分， 遇到 '1' 减分
            score += s.charAt(i) == '0' ? 1 : -1;

            // 根据当前遍历位置的得分和历史所有得分取最大值
            // 赋值给 res
            res = Math.max(res, score);
        }

        //  返回 res ， 得到最高得分
        return res;
    }
}