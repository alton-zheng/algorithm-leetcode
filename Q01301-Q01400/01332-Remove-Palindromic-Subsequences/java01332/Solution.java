package java01332;

/**
 * @Author: alton
 * @Date: Created in 6/10/21 12:56 PM
 * @Description:
 *
 * 1332. Remove Palindromic Subsequences #94
 *
 * You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 *
 * Return the minimum number of steps to make the given string empty.
 *
 * A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
 *
 * A string is called palindrome if is one that reads the same backward as well as forward.
 *
 *
 *
 * Example 1:
 *
 * Input: s = "ababa"
 * Output: 1
 * Explanation: s is already a palindrome, so its entirety can be removed in a single step.
 * Example 2:
 *
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "".
 * Remove palindromic subsequence "a" then "bb".
 * Example 3:
 *
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -> "b" -> "".
 * Remove palindromic subsequence "baab" then "b".
 *
 *
 * Constraints:
 *
 * 1 <= s.length <= 1000
 * s[i] is either 'a' or 'b'.
 *
 * Time Complexity: O(l / 2)
 * Space Complexity: O(1)
 *
 * Runtime: 0 ms, faster than 100.00% of Java online submissions for Remove Palindromic Subsequences.
 * Memory Usage: 37 MB, less than 41.39% of Java online submissions for Remove Palindromic Subsequences.
 *
 */
class Solution {
    public int removePalindromeSub(String s) {

        if ("".equals(s) || s == null) {
            return 0;
        }

        for (int left = 0,right = s.length() - 1; left <= right; left++, right--) {
            if (s.charAt(left) != s.charAt(right)) {
                return 2;
            }
        }

        return 1;
    }
}
